<?php

use ApiGfccm\Models\Member;
use ApiGfccm\Repositories\Eloquent\MemberRepositoryEloquent;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;

class MemberRepositoryEloquentTest extends TestCase
{
    use DatabaseMigrations, DatabaseTransactions, MockeryPHPUnitIntegration, MemberTestsHelper;

    protected $repository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->repository = $this->app->make(MemberRepositoryEloquent::class);
    }


    /** @test */
    public function it_returns_members()
    {
        $this->createMember(5);

        $result = $this->repository->all();

        $this->assertInstanceOf(Member::class, $result[0]);
        $this->assertEquals(5, count($result));
    }

    /** @test */
    public function it_returns_empty_when_members_does_not_exist()
    {
        $result = $this->repository->all();

        $this->assertEmpty($result);
    }

    /** @test */
    public function it_returns_a_member()
    {
        $member = $this->createMember();

        $result = $this->repository->findById($member->id);

        $this->assertInstanceOf(Member::class, $result);
        $this->assertEquals($member->id, $result->id);
    }

    /** @test */
    public function it_returns_null_when_member_does_not_exist()
    {
        $result = $this->repository->findById('unknownId');

        $this->assertNull($result);
    }

    /** @test */
    public function it_returns_a_member_on_create()
    {
        $input = factory(Member::class)->make();

        $result = $this->repository->create($input->toArray());

        $this->attributeValuesEqualsToExpected([
            'apellation',
            'firstname',
            'lastname',
            'middlename',
            'gender',
            'birthdate',
            'address',
            'phone_mobile',
            'email'
        ], $input, $result);

        $this->seeInDatabase('members', [
            'apellation' => $input->apellation,
            'firstname' => $input->firstname,
            'lastname' => $input->lastname,
            'middlename' => $input->middlename,
            'gender' => $input->gender,
            'birthdate' => $input->birthdate,
            'address' => $input->address,
            'phone_mobile' => $input->phone_mobile,
            'email' => $input->email
        ]);

        $this->assertEquals($input->firstname . ' ' . $input->lastname, $result->full_name);
        $this->assertEquals($input->firstname . ' ' . $input->lastname . ' (' . ucwords($input->apellation) . ')', $result->full_name_with_apellation);
        $this->assertInstanceOf(Member::class, $result);
    }

    /** @test */
    public function it_returns_member_on_update()
    {
        $member = $this->createMember();

        $updateInput = ['apellation' => 'testApellation', 'firstname' => 'NewFirstname', 'lastname' => 'NewLastName'];

        $result = $this->repository->update($updateInput, $member->id);

        $this->assertInstanceOf(Member::class, $result);
        $this->attributeValuesEqualsToExpected(['apellation', 'firstname', 'lastname'], $updateInput, $result);
        $this->assertEquals($member->id, $result->id);
        $this->assertEquals($updateInput['firstname'] . ' ' . $updateInput['lastname'], $result['full_name']);
        $this->assertEquals($updateInput['firstname'] . ' ' . $updateInput['lastname'] . ' (' . ucwords($updateInput['apellation']) . ')', $result->full_name_with_apellation);
        $this->seeInDatabase('members', ['apellation' => $updateInput['apellation'], 'firstname' => $updateInput['firstname'], 'lastname' => $updateInput['lastname']]);
    }

    /** @test */
    public function it_returns_null_on_update_when_member_does_not_exist()
    {
        $result = $this->repository->update([], self::UNKNOWN_ID);

        $this->assertNull($result);
    }
}
